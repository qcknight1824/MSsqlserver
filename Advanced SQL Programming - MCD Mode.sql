
---------------------------------------------------------------------------------
						  -- Hedge Sub-Bin Tagging --
---------------------------------------------------------------------------------
--CREATED BY: TONY BEJOS
--DATE: 6/17/2019
--LAST MODIFIED: 1/10/2020
--This is the modification query for the sub-bin tagging stored procedure. Run this PRIOR to running the stored procedure in CP_Build_Current
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

BEGIN
----------------------------*EDIT THE FOLLOWING LINES*----------------------------

---RUN BY SELECT QUERY (top toolbar)-->SQLCMD Mode (THIS TABLE IS WHERE YOUR QRM_AUTO_[MMM]BINS TABLE IS LOCATED
:SETVAR DBNAME [CP_BUILD_11_NOV].[DBO].[QRM_AUTO_DECBINS]

--Retail Auto table to be updated (pre-RF: Current, post-RF: Prior)
:SETVAR DB2NAME [CP_BUILD_PRIOR].[DBO].[QRM_AUTO_ALFA_REMEDIATION]

--Retail Auto table to be updated (pre-RF: Current, post-RF: Prior)
:SETVAR DB3NAME [CP_BUILD_PRIOR].[DBO].[CURRENTCYCLEDATES]

DECLARE @GROUPVAR int
DECLARE @SUBBIN_COUNT int
DECLARE @HEDGEBIN VARCHAR (50)
DECLARE @BIN_SPLIT INT
SET NOCOUNT ON

/******* BIN SPLIT IS HOW MANY CHILD BINS PER BILLION IN FACE_AMT THE DESK REQUESTS *******/

SET @BIN_SPLIT = 10
----------------------------------------------------------------------------------


----HEDGE BIN 1

SET @HEDGEBIN = 
	CONCAT('B1_PARENT (',upper(left(datename(month, (select currentcycledate from $(DB3NAME))), 3)),' ',datename(year, (select currentcycledate from $(DB3NAME))),')') --HEDGE BIN BEING BUCKETED

--NUMBER OF SUB-BINS REQUESTED (@BIN_SPLIT)
SET @GROUPVAR = 0
	WHILE @GROUPVAR <= CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 1 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

BEGIN

SET @SUBBIN_COUNT = CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 3 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END


 UPDATE $(DBNAME)
 SET SUBGROUP = @GROUPVAR + 1
 WHERE AccountNumber IN
( SELECT TOP ((SELECT COUNT(*) FROM $(DBNAME)  WHERE CAPS_HEDGE = @HEDGEBIN)/ @SUBBIN_COUNT)  AccountNumber
	 FROM $(DBNAME)
	 WHERE SUBGROUP IS NULL AND CAPS_HEDGE = @HEDGEBIN
   ORDER BY NEWID() 
 )

 SET @GROUPVAR = @GROUPVAR + 1

END

UPDATE $(DBNAME)
SET SUBGROUP = @SUBBIN_COUNT
WHERE SUBGROUP = (@SUBBIN_COUNT + 1)
 AND CAPS_HEDGE = @HEDGEBIN

UPDATE $(DBNAME)
SET SUB_BIN = CONCAT(LEFT(CAPS_HEDGE, 3), 'CHILD_', SUBGROUP)
WHERE CAPS_HEDGE IS NOT NULL
 AND SUBGROUP IS NOT NULL

PRINT CONCAT('1) B1_PARENT (',upper(left(datename(month, dateadd(month,-1,getdate())), 3)),' ',(datename(year, dateadd(month,-1,getdate()))),')', ' ROLLED AND UPDATED')

----HEDGE BIN 2

SET @HEDGEBIN = CONCAT('B2_PARENT (',upper(left(datename(month, (select currentcycledate from $(DB3NAME))), 3)),' ',datename(year, (select currentcycledate from $(DB3NAME))),')')

--NUMBER OF SUB-BINS REQUESTED (@BIN_SPLIT)
SET @GROUPVAR = 0
	WHILE @GROUPVAR <= CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 1 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

BEGIN

SET @SUBBIN_COUNT = CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 3 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

 UPDATE $(DBNAME)
 SET SUBGROUP = @GROUPVAR + 1
 WHERE AccountNumber IN
( SELECT TOP ((SELECT COUNT(*) FROM $(DBNAME)  WHERE CAPS_HEDGE = @HEDGEBIN)/ @SUBBIN_COUNT)  AccountNumber
	 FROM $(DBNAME)
	 WHERE SUBGROUP IS NULL AND CAPS_HEDGE = @HEDGEBIN
   ORDER BY NEWID() 
 )

 SET @GROUPVAR = @GROUPVAR + 1

END

UPDATE $(DBNAME)
SET SUBGROUP = @SUBBIN_COUNT
WHERE SUBGROUP = (@SUBBIN_COUNT + 1)
 AND CAPS_HEDGE = @HEDGEBIN

UPDATE $(DBNAME)
SET SUB_BIN = CONCAT(LEFT(CAPS_HEDGE, 3), 'CHILD_', SUBGROUP)
WHERE CAPS_HEDGE IS NOT NULL
 AND SUBGROUP IS NOT NULL

PRINT CONCAT('2) B2_PARENT (',upper(left(datename(month, dateadd(month,-1,getdate())), 3)),' ',(datename(year, dateadd(month,-1,getdate()))),')', ' ROLLED AND UPDATED')

----HEDGE BIN 3

SET @HEDGEBIN = 
	CONCAT('B3_PARENT (',upper(left(datename(month, (select currentcycledate from $(DB3NAME))), 3)),' ',datename(year, (select currentcycledate from $(DB3NAME))),')') --HEDGE BIN BEING BUCKETED

--NUMBER OF SUB-BINS REQUESTED (@BIN_SPLIT)
SET @GROUPVAR = 0
	WHILE @GROUPVAR <= CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 1 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

BEGIN

SET @SUBBIN_COUNT = CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 3 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

 UPDATE $(DBNAME)
 SET SUBGROUP = @GROUPVAR + 1
 WHERE AccountNumber IN
( SELECT TOP ((SELECT COUNT(*) FROM $(DBNAME)  WHERE CAPS_HEDGE = @HEDGEBIN)/ @SUBBIN_COUNT)  AccountNumber
	 FROM $(DBNAME)
	 WHERE SUBGROUP IS NULL AND CAPS_HEDGE = @HEDGEBIN
   ORDER BY NEWID() 
 )

 SET @GROUPVAR = @GROUPVAR + 1

END

UPDATE $(DBNAME)
SET SUBGROUP = @SUBBIN_COUNT
WHERE SUBGROUP = (@SUBBIN_COUNT + 1)
 AND CAPS_HEDGE = @HEDGEBIN

UPDATE $(DBNAME)
SET SUB_BIN = CONCAT(LEFT(CAPS_HEDGE, 3), 'CHILD_', SUBGROUP)
WHERE CAPS_HEDGE IS NOT NULL
 AND SUBGROUP IS NOT NULL

PRINT CONCAT('3) B3_PARENT (',upper(left(datename(month, dateadd(month,-1,getdate())), 3)),' ',(datename(year, dateadd(month,-1,getdate()))),')', ' ROLLED AND UPDATED')

----HEDGE BIN 4

SET @HEDGEBIN = 
	CONCAT('B4_PARENT (',upper(left(datename(month, (select currentcycledate from $(DB3NAME))), 3)),' ',datename(year, (select currentcycledate from $(DB3NAME))),')') --HEDGE BIN BEING BUCKETED

--NUMBER OF SUB-BINS REQUESTED (@BIN_SPLIT)
SET @GROUPVAR = 0
	WHILE @GROUPVAR <= CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 1 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

BEGIN

SET @SUBBIN_COUNT = CASE
		WHEN ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0) < 3 THEN 20
		ELSE @BIN_SPLIT * ROUND((SELECT SUM(FACE_AMT) FROM $(DBNAME) WHERE CAPS_HEDGE = @HEDGEBIN) / 1000000000,0)
		END

 UPDATE $(DBNAME)
 SET SUBGROUP = @GROUPVAR + 1
 WHERE AccountNumber IN
( SELECT TOP ((SELECT COUNT(*) FROM $(DBNAME)  WHERE CAPS_HEDGE = @HEDGEBIN)/ @SUBBIN_COUNT)  AccountNumber
	 FROM $(DBNAME)
	 WHERE SUBGROUP IS NULL AND CAPS_HEDGE = @HEDGEBIN
   ORDER BY NEWID() 
 )

 SET @GROUPVAR = @GROUPVAR + 1

END

UPDATE $(DBNAME)
SET SUBGROUP = @SUBBIN_COUNT
WHERE SUBGROUP = (@SUBBIN_COUNT + 1)
 AND CAPS_HEDGE = @HEDGEBIN

UPDATE $(DBNAME)
SET SUB_BIN = CONCAT(LEFT(CAPS_HEDGE, 3), 'CHILD_', SUBGROUP)
WHERE CAPS_HEDGE IS NOT NULL
 AND SUBGROUP IS NOT NULL

PRINT CONCAT('4) B4_PARENT (',upper(left(datename(month, dateadd(month,-1,getdate())), 3)),' ',(datename(year, dateadd(month,-1,getdate()))),')', ' ROLLED AND UPDATED')

 ----UPDATE CURRENT ALFA REMEDIATION

 UPDATE $(db2name) 
 SET SUBGROUP = B.SUBGROUP
 FROM $(db2name) A
 JOIN $(dbname) B
 ON A.AccountNumber = B.ACCOUNTNUMBER

 UPDATE $(db2name) 
 SET SUB_BIN = B.SUB_BIN
 FROM $(db2name) A
 JOIN $(dbname) B
 ON A.AccountNumber = B.ACCOUNTNUMBER

PRINT '5) [CP_Build_Current].[dbo].[QRM_AUTO_ALFA_REMEDIATION] TAGGED'
PRINT '
PROCEDURE COMPLETE'

END
